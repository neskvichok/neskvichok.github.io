Лабораторна робота №2
Тема: Розроблення дизайну веб‑застосунку (макет/дизайн майбутнього React‑проєкту)
Проєкт: QuizTrainer — тренажер для вивчення іноземних слів
Студент(ка): ______________________________   Група: __________
Дата: __________________

1. Мета роботи
- Розробити та задокументувати дизайн власного веб‑застосунку на основі попередньої роботи.
- Спроєктувати структуру сторінок (мінімум 3 сторінки) та передбачити авторизацію.
- Підготувати матеріали (опис, ілюстрації макетів/скрінів) для подальшої реалізації у React до кінця семестру.

2. Ідея проєкту (детальний опис з ілюстраціями)
Ідея: QuizTrainer — це сучасний веб‑тренажер для ефективного вивчення іноземних слів. Користувач створює власні набори слів або користується готовими, тренується у різних режимах, відстежує прогрес та досягає особистих рекордів.
Основні можливості:
- Персоналізовані набори слів (створення, редагування, «Всі слова разом»)
- 4 режими тренування: Навчання, Точність, Швидкість, Флеш‑картки
- Генератор речень для контекстного використання слів
- Профіль з детальною статистикою та досягненнями
- Авторизація через Supabase (email+password)

Ілюстрації (вставити скріншоти з папки out/ або з браузера):
[ВСТАВИТИ] Головна: app/page.tsx — банер, CTA‑кнопки, опис режимів, можливості, «Як почати?»
[ВСТАВИТИ] Квіз: app/quiz/page.tsx — вибір режиму, вибір наборів, область гри
[ВСТАВИТИ] Профіль: app/account/page.tsx — карти статистики, «Всі слова», по наборах, досягнення
[ВСТАВИТИ] Генератор речень: app/sentences/page.tsx — генерація шаблонів, рівні, мови
[ВСТАВИТИ] Авторизація: app/auth/sign‑in/page.tsx — форма входу, лінки реєстрації/відновлення

3. Фінальний дизайн веб‑сайту (що буде реалізовано у React)
3.1. Структура сторінок (вимога 3+ сторінки + авторизація — виконано):
- Головна — app/page.tsx
  Опис проєкту, фічі, CTA «Почати квіз», «Генератор речень», «Мій профіль»/«Увійти».
- Квіз — app/quiz/page.tsx
  Режими: Навчання, Точність, Швидкість, Флеш‑картки; вибір наборів; область гри; бокова панель.
- Профіль — app/account/page.tsx
  Загальна статистика, «Всі слова», статистика по наборах, симульовані графіки, досягнення, кнопка «Керувати наборами».
- Генератор речень — app/sentences/page.tsx
  Компонент генератора, категорії/рівні/мови, копіювання.
- Авторизація — app/auth/sign‑in, sign‑up, reset, update‑password
  Вхід/реєстрація/скидання/оновлення паролю на базі Supabase.

3.2. Навігація
- Верхні CTA на головній ведуть до /quiz, /sentences, /account або на сторінки входу.
- Всередині квізу передбачено повернення до профілю.

3.3. Компонентний дизайн (ключові компоненти)
- components/quiz/ModePicker.tsx — вибір режимів
- components/quiz/MultiSetPicker.tsx — множинний/одиночний вибір наборів
- components/quiz/modes/* — реалізація режимів тренування
- components/sentence‑generator/SentenceGenerator.tsx — генератор речень

3.4. Візуальний стиль
- UI‑кіт на Tailwind CSS: картки, кнопки, прогрес‑бари, градієнтні підкладки.
- Аксенти емодзі для швидкої семантики (режими, стани, CTA).
- Адаптивна сітка: 1‑4 колонки залежно від ширини.

3.5. Дані та стан
- Supabase: таблиці accuracy_results, speed_results, user_progress, sets.
- Клієнтський стан React: вибір режиму/наборів, хід гри, локальні оновлення списків слів.

4. Технологічний стек
- Next.js (App Router), React, TypeScript
- Tailwind CSS (postcss/tailwind.config.ts)
- Supabase (авторизація, збереження результатів та прогресу)

5. Вимоги курсового проєкту (виконувані у цій роботі — тільки дизайн)
- Мінімум 3 сторінки + авторизація — наявні: Головна, Квіз, Профіль, Генератор + блоки автентифікації.
- Реалізація логіки в React — до кінця семестру (ця робота фіксує дизайн і структуру).

6. Підготовка Git/GitHub
6.1. Встановлення та налаштування
- Встановити Git: https://git‑scm.com
- Зареєструвати GitHub акаунт з університетською поштою. Встановити зрозумілий nickname (ім’я+прізвище).

6.2. Створення репозиторію
- Назва репозиторію = назва проєкту, напр.: quiz-trainer
- Ініціалізація (якщо ще не ініціалізовано):
  git init
  git add .
  git commit -m "lab2: дизайн, структура сторінок, звіт"
  git branch -M main
  git remote add origin https://github.com/<nickname>/<repo>.git
  git push -u origin main

6.3. Додати викладачів
- Додати як Collaborators/Reviewers: romanbuchuk та вашого викладача (уточнити нікнейм).

6.4. Публікація змін
- Додати усі напрацювання (мокапи/скріни дизайну, цей звіт lab2.txt, файли з папки app/, components/, lib/).
- Виконати:
  git add .
  git commit -m "lab2: додано звіт та макети"
  git push

6.5. Створення Pull Request
- На GitHub створити Pull Request з гілки feature/lab2 (за бажанням):
  git checkout -b feature/lab2
  git add lab2.txt
  git commit -m "lab2: звіт та дизайн"
  git push -u origin feature/lab2
- На сторінці репозиторію натиснути "Compare & pull request", додати romanbuchuk і викладача як reviewers.

7. Посилання/Джерела
- Tailwind CSS — https://tailwindcss.com
- Next.js — https://nextjs.org
- Supabase — https://supabase.com

8. Висновки
У ході лабораторної роботи визначено ідею та дизайн застосунку QuizTrainer: сформовано структуру сторінок, навігацію, ключові компоненти і візуальні патерни. Передбачено авторизацію та збереження прогресу. Матеріали підготовлено для реалізації проєкту у React до кінця семестру. Репозиторій і процеси Git/GitHub описані, включно зі створенням Pull Request та додаванням рецензентів.

Додатки
- Скріншоти макетів сторінок (вставити у репозиторій у папку docs/ або screenshots/ і посилатися у звіті вище)
