import type { QuizSet } from "@/lib/quiz-data/types";

export function MultiSetPicker({ 
  sets, 
  selectedSetIds, 
  onChange,
  mode = "education"
}: { 
  sets: QuizSet[]; 
  selectedSetIds: string[]; 
  onChange: (setIds: string[]) => void;
  mode?: "education" | "accuracy" | "speed" | "flashcards";
}) {
  const toggleSet = (setId: string) => {
    const isSingleSetMode = mode === "accuracy" || mode === "speed" || mode === "flashcards";
    
    if (selectedSetIds.includes(setId)) {
      // –ó–Ω—ñ–º–∞—î–º–æ –≤–∏–±—ñ—Ä
      onChange(selectedSetIds.filter(id => id !== setId));
    } else {
      // –î–æ–¥–∞—î–º–æ –≤–∏–±—ñ—Ä
      if (isSingleSetMode) {
        // –î–ª—è Accuracy, Speed —ñ Flashcards —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –Ω–∞–±—ñ—Ä –∞–±–æ "–í—Å—ñ —Å–ª–æ–≤–∞"
        if (setId === 'all-words-combined') {
          onChange([setId]);
        } else {
          // –Ø–∫—â–æ –≤–∏–±–∏—Ä–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –Ω–∞–±—ñ—Ä, –∑–∞–º—ñ–Ω—é—î–º–æ –≤—Å—ñ –≤–∏–±–æ—Ä–∏
          onChange([setId]);
        }
      } else {
        // –î–ª—è Education –¥–æ–∑–≤–æ–ª—è—î–º–æ –º–Ω–æ–∂–∏–Ω–Ω–∏–π –≤–∏–±—ñ—Ä
        if (setId === 'all-words-combined') {
          // "–í—Å—ñ —Å–ª–æ–≤–∞" –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ
          onChange([setId]);
        } else {
          // –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö, –∞–ª–µ –≤–∏–¥–∞–ª—è—î–º–æ "–í—Å—ñ —Å–ª–æ–≤–∞"
          onChange(selectedSetIds.filter(id => id !== 'all-words-combined').concat(setId));
        }
      }
    }
  };

  // –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤
  const totalWords = sets.reduce((sum, set) => sum + set.words.length, 0);

  return (
    <div className="block">
      <div className="space-y-2">
        {/* –û–ø—Ü—ñ—è "–í—Å—ñ —Å–ª–æ–≤–∞" */}
        <label className="flex items-center gap-2 p-2 border rounded-lg cursor-pointer hover:bg-gray-50 bg-blue-50 border-blue-200">
          <input
            type="checkbox"
            checked={selectedSetIds.includes('all-words-combined')}
            onChange={() => toggleSet('all-words-combined')}
            className="checkbox"
          />
          <div className="flex-1 min-w-0">
            <div className="font-medium text-sm truncate text-blue-800">üåç –í—Å—ñ —Å–ª–æ–≤–∞</div>
            <div className="text-xs text-blue-600">{totalWords} —Å–ª—ñ–≤ –∑ {sets.length} –Ω–∞–±–æ—Ä—ñ–≤</div>
          </div>
        </label>
        
        {/* –†–æ–∑–¥—ñ–ª—é–≤–∞—á */}
        <div className="border-t border-gray-200 my-2"></div>
        
        {/* –ó–≤–∏—á–∞–π–Ω—ñ –Ω–∞–±–æ—Ä–∏ */}
        {sets.map((set) => (
          <label key={set.id} className="flex items-center gap-2 p-2 border rounded-lg cursor-pointer hover:bg-gray-50">
            <input
              type="checkbox"
              checked={selectedSetIds.includes(set.id)}
              onChange={() => toggleSet(set.id)}
              className="checkbox"
            />
            <div className="flex-1 min-w-0">
              <div className="font-medium text-sm truncate">{set.name}</div>
              <div className="text-xs text-gray-500">{set.words.length} —Å–ª—ñ–≤</div>
            </div>
          </label>
        ))}
      </div>
      {selectedSetIds.length === 0 && (
        <div className="text-sm text-gray-500 mt-2">–í–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –Ω–∞–±—ñ—Ä</div>
      )}
    </div>
  );
}
